.
├── .github/                  # CI/CD or automation workflows
├── product-config/          # Tenant-specific Grafana & Opensearch configuration
│   ├── mahesh/
│   │   ├── grafana/
│   │   │   ├── alerts/      # Terraform-based alert definitions for Grafana
│   │   │   └── dashboards/  # Dashboard JSON files
│   │   └── opensearch/      # Similar structure for Opensearch alerts/dashboards
│   └── arth/
│       └── ...              # Same as above for a different tenant
├── Scripts/                 # Utility or automation scripts (possibly Bash, Python)
├── terraform/
│   ├── development/
│   ├── production/
│   ├── servicezone/
│   ├── simulation/
│   └── testing/
│       └── ttt-testing/
│           ├── grafana-configuration/
│           │   ├── locals.tf
│           │   ├── main.tf
│           │   ├── provider.tf
│           │   └── terraform.tf
│           └── opensearch-configuration/
This is modular and environment-aware (like dev, prod, test), with multi-tenant support (mahesh, arth).

📄 2. Code Explained (Line-by-Line)
locals.tf
hcl
Copy
Edit
locals {
  sso-client_id =   # This should be the client ID for Azure AD SSO
SSO config placeholder.

hcl
Copy
Edit
  data_sources_prometheus = {
    go-mahesh-dev = {
      org_name = "gcp-mahesh"
    }
    ...
  }
Defines Prometheus datasources per tenant/environment. These will be looped over in modules.

hcl
Copy
Edit
resource "grafana_notification_policy" "my_notification_policy" {
  org_id         = module.grafana-configuration.orgs_is_by_name["gcp-mahesh"]
  group_by       = ["grafana-folder", "alertname"]
  contact_point  = "teams_alertingmahes"
}
Defines notification policy scoped by folders and alert name, sends to Microsoft Teams.

main.tf
hcl
Copy
Edit
module "environmrnt" {
  source = "../"
}
Loads the environment (e.g., dev/prod) settings.

hcl
Copy
Edit
data "google_secret_manager_secret_version" "clientsecret" {
  secret = "grafana-${module.environmrnt.name}-azuread-clentserver"
}
Fetches secret for Azure AD Client for the environment.

hcl
Copy
Edit
module "grafana-configuration" {
  source = ...
Central module for configuring Grafana.

hcl
Copy
Edit
  oraganizations = {
    for tenant in module.environment.tenants : "gcp-${tenant}" => {}
  }
Dynamic tenant-org mapping.

hcl
Copy
Edit
  sso_setting_azuread = {
    enable                  = true
    clent_id                = local.sso_clentid
    cleint_secret           = ...
    role_attribute_strict   = false
    role_attributr_path     = "contain(roles[*],'global_admin') && 'grafanaAdmin' || null"
Defines SSO settings, including role mapping logic based on Azure AD roles.

hcl
Copy
Edit
    org_mapping = concat(
      ["global_admin:*:Admin"],
      [for tenants in toset(["mahesh","arth"]) : "global_cloud_operations:gcp-${tenants}:Editor"],
      [for tenants in module.environment.tenants : "-${tenants}_developer:gcp-${tenants}:Editor"],
      [for tenants in module.environment.tenants : "-${tenants}_developer:gcp-${tenants}:Viewer"]
    )
Maps AD groups to Grafana roles per tenant.

provider.tf
hcl
Copy
Edit
provider "google" {
  project = module.environment.project
  region  = module.environment.region
}

provider "grafana" {
  url  = "..."   # Grafana instance URL
  auth = ...     # Auth token
}
Sets up Terraform providers for Google Cloud and Grafana.

Alert Modules
hcl
Copy
Edit
module "grafana_alerting_mahesh" {
  source = "../../../../product-config/mahesh/grafana/alerts/"
  for_each = {
    for ds_key, ds_value in local.data_sources_prometheus :
    ds_key => ds_value.org_name if ds_value.org_name == "gcp-mahesh"
  }
  org_id         = module.grafana-configuration.org_ids_by_name[each.value]
  datasource_uid = each.key
}
This is a dynamic instantiation of Grafana alerts per Prometheus datasource per tenant.

🔁 3. How Modules Are Used
grafana-configuration is a shared reusable module.

Per-tenant modules like grafana_alerting_mahesh are used to manage tenant-specific alerts.

Each tenant's config is separated in folders (good for GitOps).

module.environment.tenants drives the loops to avoid hardcoding.

🌍 4. Multi-Tenant / Multi-Env Management
The design uses environment folders under terraform/ like development, testing, etc.

Each has isolated configuration files (main.tf, provider.tf).

Reuse of grafana-configuration module with for_each and locals ensures flexibility and scalability.

Secrets and credentials are securely managed via Google Secret Manager.

🚀 5. Future Potential and Improvements
✅ Strong foundation for GitOps and automation.

🚀 Consider moving tenant-level dashboards to JSON-based version control.

🔐 Migrate to Terraform 1.11+ to use sensitive secrets correctly (currently noted in comments).

🧪 Add validation/CI checks for alert/dashboards using tools like tflint, grafana-dashboard-validator.

🧹 Code cleanup: fix typos like "clent_id", "cleint_secret", "oraganizations", "datasource _uid".

Want me to create a diagram or sample dashboard module code from this structure? Or help you refactor anything?







You said:
yes
ChatGPT said:
Great! Let's tackle this in a structured way. Since you said "yes", I’ll:

✅ Provide a diagram of the architecture/folder/module relationships.

✅ Show a sample Grafana dashboard module in Terraform that fits your structure.

✅ Clean up and refactor some of the existing code to improve clarity and fix typos.

Let’s start with the diagram and then move on to the code samples.

📊 1. Diagram of Folder + Module Relationships
Here’s a high-level view of how everything is structured:

bash
Copy
Edit
┌──────────────────────────────────────────────────────────┐
│                    Terraform Environments                │
│  (terraform/development, production, testing, etc.)      │
└──────────────┬────────────────────────────┬──────────────┘
               │                            │
      ┌────────▼────────┐         ┌─────────▼─────────┐
      │ main.tf         │         │ provider.tf       │
      │ locals.tf       │         └───────────────────┘
      │ variables.tf    │
      └────────┬────────┘
               │
       ┌───────▼────────────────────────────────────────────┐
       │     Module: grafana-configuration                   │
       │  (shared config: orgs, SSO, roles, datasources)     │
       └───────┬─────────────────────────────────────────────┘
               │
        ┌──────▼────────────────┐
        │ Alerting Modules per Tenant                         │
        │ ┌──────────────────────────────────────┐            │
        │ │ product-config/mahesh/grafana/alerts │            │
        │ └──────────────────────────────────────┘            │
        │ ┌──────────────────────────────────────┐            │
        │ │ product-config/arth/grafana/alerts   │            │
        │ └──────────────────────────────────────┘            │
        └─────────────────────────────────────────────────────┘

         + Dashboards loaded from:
           product-config/<tenant>/grafana/dashboards/

         + Prometheus data source driven by locals.tf
🧩 2. Sample Dashboard Module (dashboards.tf in product-config/mahesh/grafana/dashboards)
hcl
Copy
Edit
resource "grafana_dashboard" "tenant_dashboards" {
  for_each = fileset("${path.module}/", "*.json")

  config_json = file("${path.module}/${each.value}")
}
This will load every .json file in the dashboards/ directory and create a Grafana dashboard from it.

📁 Example dashboard file: product-config/mahesh/grafana/dashboards/api-performance.json

🛠 3. Cleaned-Up Snippet of main.tf (Fixing Typos & Formatting)
hcl
Copy
Edit
module "grafana-configuration" {
  source = "..."

  organizations = {
    for tenant in module.environment.tenants : "gcp-${tenant}" => {}
  }

  sso_setting_azuread = {
    enable                = true
    client_id             = local.sso_client_id
    client_secret         = data.google_secret_manager_secret_version.clientsecret.secret_data
    role_attribute_strict = false
    role_attribute_path   = "contains(roles[*], 'global_admin') && 'grafanaAdmin' || null"
    
    org_mapping = concat(
      ["global_admin:*:Admin"],
      [for tenant in toset(["mahesh", "arth"]) : "global_cloud_operations:gcp-${tenant}:Editor"],
      [for tenant in module.environment.tenants : "${tenant}_developer:gcp-${tenant}:Editor"],
      [for tenant in module.environment.tenants : "${tenant}_viewer:gcp-${tenant}:Viewer"]
    )
  }

  data_sources_prometheus = local.data_sources_prometheus

  dashboard_files_paths = {
    for tenant in module.environment.tenants :
    "gcp-${tenant}" => "${path.root}/../../../../../product-config/${tenant}/grafana/dashboards/"
  }

  service_account = {
    for tenant in module.environment.tenants : "datasource-syncer-${tenant}" => {
      org_name        = "gcp-${tenant}"
      role            = "Admin"
      service_account = "datasource-syncer-${tenant}"
    }
  }

  service_account_tokens = {
    for tenant in module.environment.tenants : "datasource-syncer-${tenant}" => {
      service_account = "datasource-syncer-${tenant}"
    }
  }

  contact_points_opsgenie = local.contact_points_opsgenie
  contact_points_teams    = local.contact_points_teams
}
✅ Next Steps
Would you like me to generate:

Sample JSON dashboard you can test with?

A reusable module structure for alerts?

GitHub Actions for automated terraform plan/apply?

Let me know where you want to dive deeper.







You said:
yes please


ChatGPT said:
Awesome! Let’s go ahead and build everything you asked for:

✅ 1. Sample JSON Grafana Dashboard (api-performance.json)
This example shows an API latency dashboard for Prometheus. Save it to:

📄 product-config/mahesh/grafana/dashboards/api-performance.json

json
Copy
Edit
{
  "id": null,
  "title": "API Performance",
  "timezone": "browser",
  "schemaVersion": 30,
  "version": 1,
  "refresh": "10s",
  "panels": [
    {
      "type": "graph",
      "title": "API Latency (95th Percentile)",
      "datasource": "Prometheus",
      "targets": [
        {
          "expr": "histogram_quantile(0.95, sum(rate(api_request_duration_seconds_bucket[5m])) by (le))",
          "legendFormat": "p95",
          "interval": "",
          "refId": "A"
        }
      ],
      "xaxis": {
        "mode": "time"
      },
      "yaxis": {
        "format": "s",
        "label": "Latency (s)"
      }
    }
  ]
}
You can expand this dashboard with more metrics like errors per second, request rate, etc.

✅ 2. Reusable Terraform Alert Module
Create a reusable alert module like this inside:

📁 modules/grafana-alert

hcl
Copy
Edit
variable "org_id" {}
variable "datasource_uid" {}
variable "alert_name" {}

resource "grafana_rule_group" "api_alerts" {
  name     = "API Alert Group - ${var.alert_name}"
  org_id   = var.org_id
  interval = "1m"

  rule {
    name       = var.alert_name
    for        = "1m"
    annotations = {
      summary = "High API latency detected"
    }

    condition = "C"

    data {
      ref_id = "A"
      query_type = "time_series"
      relative_time_range = {
        from = 300
        to   = 0
      }
      datasource_uid = var.datasource_uid
      model = {
        expr = "histogram_quantile(0.95, sum(rate(api_request_duration_seconds_bucket[5m])) by (le))"
      }
    }

    data {
      ref_id = "C"
      type   = "reduce"
      params = ["last"]
      expression = "A"
    }

    data {
      ref_id = "D"
      type   = "threshold"
      params = [1]
      expression = "C"
    }
  }
}
Usage in your main.tf:
hcl
Copy
Edit
module "mahesh_api_alert" {
  source         = "../../../modules/grafana-alert"
  for_each       = { for ds_key, ds_val in local.data_sources_prometheus : ds_key => ds_val if ds_val.org_name == "gcp-mahesh" }
  org_id         = module.grafana-configuration.org_ids_by_name[each.value.org_name]
  datasource_uid = each.key
  alert_name     = "High API latency"
}
✅ 3. GitHub Actions CI/CD for Terraform
Place this in .github/workflows/terraform.yml:

yaml
Copy
Edit
name: Terraform Plan & Apply

on:
  push:
    branches: [main]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'

jobs:
  terraform:
    name: 'Terraform Plan/Apply'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform -chdir=terraform/testing/ttt-testing/grafana-configuration init

      - name: Terraform Format
        run: terraform fmt -recursive -check

      - name: Terraform Validate
        run: terraform -chdir=terraform/testing/ttt-testing/grafana-configuration validate

      - name: Terraform Plan
        run: terraform -chdir=terraform/testing/ttt-testing/grafana-configuration plan

      # Uncomment to apply on push (e.g. in staging)
      # - name: Terraform Apply
      #   run: terraform -chdir=terraform/testing/ttt-testing/grafana-configuration apply -auto-approve
✅ Next Options
Would you like me to:

Build alert modules for Opensearch too?

Help generate more dashboards?

Help make tenant onboarding easier with a script?

Let me know what direction you want to take next!







You said:
how the product-config worked for other environment as we have only alerts.tf how it will populated in other environmet ,i want all the details with proper example


ChatGPT said:
Awesome, let's walk through how product-config works across environments and how alerts.tf (and other Terraform files like dashboards) get picked up and used for each environment (dev, test, prod, etc.).

🧠 Concept: How product-config is Used in Environments
Your structure separates environment-specific infrastructure (in the terraform/ folder) from product-specific configuration (in product-config/). This is good Terraform design.

🔄 The environments (like testing, production) do this:
Use main.tf and module "grafana-configuration" to set up shared Grafana things like:

orgs

service accounts

SSO config

dashboard folder mappings

Prometheus data sources

Dynamically load product-config/<tenant>/grafana/alerts/alerts.tf using a per-tenant module block.

That means: even though alerts.tf is only in product-config, it's loaded once per tenant per environment, like this:

hcl
Copy
Edit
module "grafana_alerting_mahesh" {
  source = "../../../../product-config/mahesh/grafana/alerts/"

  for_each = {
    for ds_key, ds_val in local.data_sources_prometheus :
    ds_key => ds_val.org_name if ds_val.org_name == "gcp-mahesh"
  }

  org_id         = module.grafana-configuration.org_ids_by_name[each.value]
  datasource_uid = each.key
}
You’ll repeat the same for arth, vikas, etc.

✅ How it Works Across Environments (Step-by-Step)
Let’s say you are applying the configuration in:

🔧 Environment: testing/ttt-testing/grafana-configuration/
Here’s how Terraform uses things:

main.tf declares:

Which tenants to configure (mahesh, arth, etc.)

Loads the grafana-configuration module with all shared config

Dynamically calls product-config/<tenant>/grafana/alerts/ as a module source

product-config/mahesh/grafana/alerts/alerts.tf is a standard Terraform file:

It has grafana_rule_group, grafana_alert, etc.

It uses org_id and datasource_uid from the main.tf module call

If terraform plan is run in the testing/ttt-testing/grafana-configuration/ folder:

It pulls in the files from ../../../../product-config/mahesh/grafana/alerts/

Runs the alert module for each datasource belonging to "gcp-mahesh"

Same goes for arth, vikas, etc.

📦 Example: product-config/mahesh/grafana/alerts/alerts.tf
hcl
Copy
Edit
resource "grafana_rule_group" "latency_alerts" {
  name     = "API Alert Group"
  org_id   = var.org_id
  interval = "1m"

  rule {
    name     = "High Latency Alert"
    for      = "2m"
    condition = "C"

    annotations = {
      summary = "API latency is high"
    }

    data {
      ref_id = "A"
      query_type = "time_series"
      datasource_uid = var.datasource_uid
      model = {
        expr = "histogram_quantile(0.95, sum(rate(api_request_duration_seconds_bucket[5m])) by (le))"
      }
    }

    data {
      ref_id     = "C"
      type       = "threshold"
      expression = "A"
      params     = [1]
    }
  }
}
And in your main.tf, you have:

hcl
Copy
Edit
module "grafana_alerting_mahesh" {
  source = "../../../../product-config/mahesh/grafana/alerts/"

  for_each = {
    for ds_key, ds_val in local.data_sources_prometheus :
    ds_key => ds_val.org_name if ds_val.org_name == "gcp-mahesh"
  }

  org_id         = module.grafana-configuration.org_ids_by_name[each.value]
  datasource_uid = each.key
}
Repeat this logic for each tenant.

🔄 Summary Flow Across Environments
Let’s break it into a diagram:

bash
Copy
Edit
terraform/
  └── testing/
        └── ttt-testing/
              └── grafana-configuration/
                    ├── main.tf → dynamically loads → product-config/<tenant>/grafana/alerts/alerts.tf
                    ├── locals.tf
                    ├── provider.tf

product-config/
  └── mahesh/
        └── grafana/
              └── alerts/
                    └── alerts.tf → defines actual Grafana alert rules

# So for each tenant, each environment will pull their alerts this way.
🚀 Bonus: Make it Fully Automatic
You can create a loop over all tenants in main.tf to avoid writing one module per tenant manually:

hcl
Copy
Edit
locals {
  tenants = ["mahesh", "arth"]
}

module "grafana_alerts" {
  for_each = {
    for tenant in local.tenants :
    tenant => {
      source_dir = "../../../../product-config/${tenant}/grafana/alerts/"
      alerts     = {
        for ds_key, ds_val in local.data_sources_prometheus :
        ds_key => ds_val.org_name if ds_val.org_name == "gcp-${tenant}"
      }
    }
  }

  source = each.value.source_dir
  for_each = each.value.alerts

  org_id         = module.grafana-configuration.org_ids_by_name[each.value]
  datasource_uid = each.key
}
✅ Let Me Know:
Do you want me to help:

Refactor the loop-based alert modules fully for all tenants?

Add automated per-environment deployment script?

Build one for dashboards too?

Let’s make it clean and scalable!







You said:
i want to understand entire code with proper example ,lets assume i am layman and want to understand these 


ChatGPT said:
Updated saved memory
Perfect! Let's take a complete beginner-friendly tour of your Grafana + Terraform setup — step-by-step, like you're totally new to it. I’ll explain the folder structure, what each file does, and how everything works together to create dashboards and alerts for different teams (tenants like mahesh, arth) and environments (like dev, testing, production).

🧭 PART 1: Overview of the Folder Structure
Here’s your folder tree (simplified):

graphql
Copy
Edit
.
├── product-config/                   # Product-specific Grafana configs (per team)
│   ├── mahesh/
│   │   └── grafana/
│   │       ├── alerts/              # Contains alert rules in Terraform
│   │       └── dashboards/          # Contains dashboard JSON files
│   └── arth/
│       └── grafana/
│           ├── alerts/
│           └── dashboards/
│
├── terraform/                       # Environment-specific Terraform configurations
│   ├── development/
│   ├── production/
│   └── testing/
│       └── ttt-testing/
│           └── grafana-configuration/
│               ├── locals.tf       # Common values like tenant list, data sources
│               ├── main.tf         # Main logic to wire everything together
│               ├── provider.tf     # Define providers like Google and Grafana
│               └── terraform.tf    # Terraform backend config
🧩 PART 2: The Building Blocks (With Layman Examples)
🔧 1. locals.tf – Think of this as a central cheat sheet
It defines:

Which teams (aka tenants) exist

What their Grafana organization name is

Settings reused in many places

hcl
Copy
Edit
locals {
  data_sources_prometheus = {
    go-mahesh-dev = {
      org_name = "gcp-mahesh"
    },
    go-arth-dev = {
      org_name = "gcp-arth"
    }
  }
}
Layman terms:
💬 “Hey Terraform, these are my Prometheus data sources. For example, ‘go-mahesh-dev’ belongs to Grafana org ‘gcp-mahesh’.”

📦 2. main.tf – The conductor of the orchestra 🎻
This is where Terraform says:

"I need to create things for each environment and tenant"

“Hey, let’s load dashboards and alerts for Mahesh and Arth”

"Let’s pass the right values like org name, secret, etc."

✅ Example Block: Loading Mahesh Alerts
hcl
Copy
Edit
module "grafana_alerting_mahesh" {
  source = "../../../../product-config/mahesh/grafana/alerts/"

  for_each = {
    for ds_key, ds_val in local.data_sources_prometheus :
    ds_key => ds_val.org_name if ds_val.org_name == "gcp-mahesh"
  }

  org_id         = module.grafana-configuration.org_ids_by_name[each.value]
  datasource_uid = each.key
}
💬 “Hey Terraform, for every Prometheus data source in Mahesh’s org (gcp-mahesh), go get the alert config from that path and pass in the correct org_id and datasource_uid.”

🚨 3. product-config/mahesh/grafana/alerts/alerts.tf – Actual Alert Rule
This is like saying:

“If API latency is over 1 second for more than a minute, raise an alert!”

hcl
Copy
Edit
resource "grafana_rule_group" "latency_alerts" {
  name   = "API Alert Group"
  org_id = var.org_id
  interval = "1m"

  rule {
    name = "High Latency Alert"
    condition = "C"
    for = "1m"

    data {
      ref_id = "A"
      query_type = "time_series"
      datasource_uid = var.datasource_uid
      model = {
        expr = "histogram_quantile(0.95, sum(rate(api_request_duration_seconds_bucket[5m])) by (le))"
      }
    }

    data {
      ref_id     = "C"
      type       = "threshold"
      expression = "A"
      params     = [1]
    }
  }
}
💬 “Use Prometheus to calculate the 95th percentile of latency. If that value is greater than 1 second, fire the alert.”

📊 4. product-config/mahesh/grafana/dashboards/api-performance.json – Dashboard File
This is a standard Grafana JSON dashboard.

json
Copy
Edit
{
  "title": "API Performance",
  "panels": [
    {
      "title": "API Latency (p95)",
      "type": "graph",
      "targets": [
        {
          "expr": "histogram_quantile(0.95, sum(rate(api_request_duration_seconds_bucket[5m])) by (le))"
        }
      ]
    }
  ]
}
💬 “This dashboard shows API latency over time using a p95 (95th percentile) graph.”

🔐 5. provider.tf – Like drivers to connect Terraform to Grafana/Google
hcl
Copy
Edit
provider "google" {
  project = module.environment.project
  region  = module.environment.region
}

provider "grafana" {
  url  = "https://grafana.mycompany.com"
  auth = "Bearer token123"
}
💬 “Hey Terraform, use Google Cloud and Grafana — here are the credentials.”

🔁 PART 3: How It All Works Together
Let’s say you're deploying for environment testing, for tenant mahesh.

You run:

bash
Copy
Edit
cd terraform/testing/ttt-testing/grafana-configuration
terraform plan
terraform apply
Terraform:

Reads locals.tf to find your tenants and datasources

Loads main.tf, which:

Pulls shared Grafana settings

Pulls alert rules from product-config/mahesh/grafana/alerts/

(Later you can do the same for dashboards)

Result:

Mahesh’s alerts and dashboards get created in Grafana

Same setup can be reused for other tenants and other environments

🧠 Final Summary

Concept	What It Does
product-config	Stores alerts and dashboards per team (Mahesh, Arth, etc.)
terraform/<env>	Deploys config to dev/test/prod environments
locals.tf	Declares tenants, Prometheus data sources, common settings
main.tf	Brings everything together (like a boss)
alerts.tf	Actual alert rule logic, reusable per tenant
dashboards/*.json	Grafana dashboard layouts
provider.tf	Connects Terraform to Grafana and GCP
👉 What’s Next?
Would you like me to:

Show how dashboards are wired in just like alerts?

Automate onboarding of new tenants with a script?

Clean up and refactor your current codebase with best practices?

Let me know and I’ll walk you through it!







You said:
lets assume my  alerts.tf  below "resource "grafana_rule_group" "arth" {
  name             = "${var.datasource_uid}-arth"
  folder_uid       = "arth"
  interval_seconds = 240
  org_id           = var.org_id
  rule {
    name           = "create xml dead letter"
    condition      = "C"
    data {
      ref_id     = "A"
      query_type = ""
      relative_time_range {
        from = 600
        to   = 0
      }
      datasource_uid = "gmp-arth-test"
      model = jsonencode({
        hide          = false
        intervalMs    = 1000
        maxDataPoints = 43200
        refId         = "A"
      })
    }
	data {
      ref_id     = "C"
      query_type = ""
      relative_time_range {
        from = 600
        to   = 0
      }
	 datasource_uid = "__expr__""


ChatGPT said:
Great! Let’s break this alerts.tf example line by line as if you’re completely new to it, and we’ll explain what’s happening in plain language. This is a Grafana managed alert rule written in Terraform, specific to the arth tenant.

✅ Full Terraform Block (as given)
hcl
Copy
Edit
resource "grafana_rule_group" "arth" {
  name             = "${var.datasource_uid}-arth"
  folder_uid       = "arth"
  interval_seconds = 240
  org_id           = var.org_id

  rule {
    name           = "create xml dead letter"
    condition      = "C"

    data {
      ref_id     = "A"
      query_type = ""
      relative_time_range {
        from = 600
        to   = 0
      }
      datasource_uid = "gmp-arth-test"
      model = jsonencode({
        hide          = false
        intervalMs    = 1000
        maxDataPoints = 43200
        refId         = "A"
      })
    }

    data {
      ref_id     = "C"
      query_type = ""
      relative_time_range {
        from = 600
        to   = 0
      }
      datasource_uid = "__expr__"
    }
  }
}
🔍 Breaking it Down: Layman Terms + Technical Explanation
🔹 resource "grafana_rule_group" "arth" { ... }
This creates a rule group in Grafana — basically a container for one or more alert rules.

arth is just the Terraform internal name (used to reference this block in other code).

🔹 name = "${var.datasource_uid}-arth"
This names the rule group using the current data source UID (like go-arth-dev) and appending -arth to it.

💬 Example output name: go-arth-dev-arth

🔹 folder_uid = "arth"
This means this alert rule group will be placed inside the "arth" folder in Grafana.

💬 Think of folders as how Grafana organizes dashboards and alert rules by tenant/team.

🔹 interval_seconds = 240
This tells Grafana:

“Run this alert check every 240 seconds (i.e., every 4 minutes).”

🔹 org_id = var.org_id
This connects the rule group to a specific Grafana organization. Each tenant (e.g., arth, mahesh) usually gets their own org in Grafana.

var.org_id is passed in from the parent main.tf file.

🔸 Inside the rule block
This is where you define a single alert rule. In your example, it’s checking something related to "create xml dead letter".

🔸 name = "create xml dead letter"
This is the friendly name of the alert. It shows up in Grafana when the alert fires.

🔸 condition = "C"
This tells Grafana:

“Trigger the alert if the condition in data block with ref_id = C evaluates to true.”

So C is like your final alert expression.

🔸 First data block (ref_id = A)
hcl
Copy
Edit
data {
  ref_id     = "A"
  query_type = ""
  ...
  datasource_uid = "gmp-arth-test"
  model = jsonencode({ ... })
}
This is the actual Prometheus query (or other data source query) being run.

ref_id = A → This is used as a label, like saying “this is my primary query”

relative_time_range → Run the query for the last 10 minutes (600 seconds)

datasource_uid = "gmp-arth-test" → This tells Grafana which Prometheus (or other) source to query from

🔧 The model = jsonencode({...}) block tells Grafana how to render and run the query.

🔸 Second data block (ref_id = C)
hcl
Copy
Edit
data {
  ref_id     = "C"
  ...
  datasource_uid = "__expr__"
}
This is a threshold check or math expression on top of your main query.

ref_id = C matches the condition "C"

datasource_uid = "__expr__" means this block doesn't query data directly, but evaluates an expression using previous results

✅ Typically you would see:

hcl
Copy
Edit
expression = "A > 0"
But your snippet is missing that — it needs:

hcl
Copy
Edit
expression = "A > 0"
🔁 How it works during deployment:
Let’s say we are deploying to Arth’s dev environment.

In main.tf, we have:

hcl
Copy
Edit
module "grafana_alerting_arth" {
  source = "../../../../product-config/arth/grafana/alerts/"
  for_each = {
    for ds_key, ds_value in local.data_sources_prometheus :
    ds_key => ds_value.org_name
    if ds_value.org_name == "gcp-arth"
  }

  org_id         = module.grafana-configuration.org_ids_by_name[each.value]
  datasource_uid = each.key
}
💡 What happens:

Terraform runs this alerts.tf once for every Prometheus data source that belongs to Arth

It passes in the correct org_id and datasource_uid to your grafana_rule_group block

You end up with alert rules like:

go-arth-dev-arth

go-arth-test-arth

🧪 Example Alert: What’s this doing?
If your model query looks for XML messages sent to a “dead letter queue” (DLQ), the alert is saying:

🔔 “If we see dead-lettered XMLs in the last 10 minutes, raise an alert!”

🧠 Summary

Item	Description
grafana_rule_group	Creates a set of alert rules in Grafana
rule	Defines a single alert (like a check for XML dead letter messages)
data.ref_id = "A"	The main query (like a Prometheus metric)
data.ref_id = "C"	The alert condition (e.g., A > 0)
datasource_uid	Links query to specific tenant's Prometheus
org_id	Links alert rule to a Grafana organization (like Arth)
for_each in main.tf	Repeats the alert setup for each tenant's data source
Would you like me to:

Show the corrected full alerts.tf with expressions and working syntax?

Help build the dashboard module the same way?

Explain how to add new tenants easily?

Let’s keep going step by step — your call!







You said:
now explain how the one terraform alerts.tf serves in all other environment ,is it based on datasorce_uid or how ,please explain the end to end workflow stepwise
ChatGPT said:
Perfect — let’s walk through step-by-step how one Terraform alerts.tf file (per tenant like arth or mahesh) can serve all environments (e.g., dev, test, prod) using dynamic configuration.

🎯 Goal:
You want to understand how one file like alerts.tf can dynamically create alerts for each environment (e.g., dev, test, prod), without duplicating it for each one.

🏗️ Project Layout Quick Reminder
Let’s focus on a simplified view:

lua
Copy
Edit
product-config/
├── arth/
│   └── grafana/
│       └── alerts/
│           └── alerts.tf  <-- ONE file for Arth
And then in your terraform/testing/ttt-testing/grafana-configuration/main.tf, you have:

hcl
Copy
Edit
module "grafana_alerting_arth" {
  source = "../../../../product-config/arth/grafana/alerts/"
  for_each = {
    for ds_key, ds_value in local.data_sources_prometheus :
    ds_key => ds_value.org_name
    if ds_value.org_name == "gcp-arth"
  }

  org_id         = module.grafana-configuration.org_ids_by_name[each.value]
  datasource_uid = each.key
}
✅ HOW ONE alerts.tf WORKS FOR ALL ENVIRONMENTS: Step-by-Step
1. You define data sources per environment in locals.tf
hcl
Copy
Edit
locals {
  data_sources_prometheus = {
    go-arth-dev = {
      org_name = "gcp-arth"
    },
    go-arth-test = {
      org_name = "gcp-arth"
    }
  }
}
👉 This maps Prometheus datasource UIDs to Grafana orgs per tenant and environment.

2. main.tf loops through data sources for Arth
hcl
Copy
Edit
for_each = {
  for ds_key, ds_value in local.data_sources_prometheus :
  ds_key => ds_value.org_name
  if ds_value.org_name == "gcp-arth"
}
This:

Filters only Arth's data sources

Runs the alerting module once for each environment (e.g., go-arth-dev, go-arth-test)

3. For each environment, Terraform injects variables into alerts.tf
In your alert module (alerts.tf), you use:

hcl
Copy
Edit
name       = "${var.datasource_uid}-arth"
org_id     = var.org_id
These come from the for_each loop in main.tf, so Terraform injects different values for each environment:


Iteration	datasource_uid	org_id
1	go-arth-dev	gcp-arth org ID
2	go-arth-test	gcp-arth org ID
4. Grafana alert gets deployed per environment
For each environment's data source:

Grafana alert rule group is named differently (e.g., go-arth-dev-arth)

Query is linked to the correct Prometheus data source

Alert is placed in the correct Grafana organization and folder

✅ You don’t need to duplicate alerts.tf for each environment — one reusable file handles all.

🎯 Final Result
With one alerts.tf file, Terraform creates:

One alert rule group for go-arth-dev

One alert rule group for go-arth-test

Both linked to Arth’s org in Grafana

Queries running against different Prometheus environments (e.g., dev/test)

🔄 Diagram: Workflow in Plain English
vbnet
Copy
Edit
[locals.tf]
    ⬇ defines data_sources
[main.tf]
    ⬇ loops over each environment's datasource for tenant
[module "grafana_alerting_arth"]
    ⬇ calls alerts.tf for each
[alerts.tf]
    ⬇ creates rule group
[grafana]
    ✅ alerts created per env (dev/test/prod)
🧠 Summary Table

Concept	Purpose
data_sources_prometheus	Holds datasource UID → tenant mapping
for_each in main.tf	Loops over each environment (e.g., dev/test) for a tenant
alerts.tf	Used once per tenant, reused across environments
datasource_uid, org_id	Passed dynamically to alert module
__expr__	Used in Grafana alerts to evaluate expressions (e.g., A > 0)
Would you like me to:

Write a cleaned-up and complete alerts.tf example using expressions?

Show how dashboards work similarly using folders and data sources?

Add a new tenant like kiran and show how it scales?

Let’s take the next step together if you’re ready!







You said:
yes
ChatGPT said:
Awesome! Let's take the next step. We’ll go with a clean, complete alerts.tf example that works dynamically for all environments (dev, test, prod) and explain it clearly.

✅ What We'll Do
Show a clean and corrected alerts.tf

Explain how expressions work properly

Describe how this connects to main.tf and data sources

Recap: How this serves multiple environments using one file

🧾 Clean & Complete Example: alerts.tf
Here’s a properly working version of your alerts.tf file for tenant arth:

hcl
Copy
Edit
resource "grafana_rule_group" "arth" {
  name             = "${var.datasource_uid}-arth"    # Unique per environment
  folder_uid       = "arth"                          # Folder for this tenant
  interval_seconds = 240                             # Run every 4 minutes
  org_id           = var.org_id                      # Provided by main.tf

  rule {
    name      = "Dead Letter Alert - XML Create"
    condition = "C"   # This is the expression to evaluate for triggering alert

    # Main query - What are we measuring?
    data {
      ref_id     = "A"
      query_type = "time_series_query"
      relative_time_range {
        from = 600  # from 10 minutes ago
        to   = 0    # to now
      }
      datasource_uid = var.datasource_uid

      model = jsonencode({
        hide          = false
        intervalMs    = 1000
        maxDataPoints = 43200
        refId         = "A"
        expr          = "xml_dead_letter_count{service=\"create-xml\"}"  # Sample PromQL
        format        = "time_series"
        intervalFactor = 2
        legendFormat   = "DLQ XML"
        step           = 60
      })
    }

    # Expression block - logic to trigger alert
    data {
      ref_id     = "C"
      query_type = "expression"
      relative_time_range {
        from = 600
        to   = 0
      }
      datasource_uid = "__expr__"

      model = jsonencode({
        refId      = "C"
        type       = "threshold"
        expression = "A > 0"     # Alert if count > 0
      })
    }

    # Optional: define no_data behavior, for example
    no_data_state = "OK"
    exec_err_state = "Alerting"
  }
}
🧠 How This Connects to main.tf
In main.tf, you call this alert module using a loop like this:

hcl
Copy
Edit
module "grafana_alerting_arth" {
  source = "../../../../product-config/arth/grafana/alerts/"

  for_each = {
    for ds_key, ds_value in local.data_sources_prometheus :
    ds_key => ds_value.org_name
    if ds_value.org_name == "gcp-arth"
  }

  org_id         = module.grafana-configuration.org_ids_by_name[each.value]
  datasource_uid = each.key
}
🔍 Let’s say local.data_sources_prometheus looks like:
hcl
Copy
Edit
go-arth-dev = { org_name = "gcp-arth" }
go-arth-test = { org_name = "gcp-arth" }
Then Terraform runs alerts.tf twice:

Once with datasource_uid = go-arth-dev

Once with datasource_uid = go-arth-test

Result:

You get two alert rule groups: go-arth-dev-arth and go-arth-test-arth

Both in the arth folder

Each linked to the correct data source and environment

🔄 Final Workflow Recap
✅ You define data sources per environment in locals.tf

✅ main.tf loops through them, filtering per tenant

✅ Each loop calls the same alerts.tf file

✅ Terraform injects the right org_id and datasource_uid

✅ One alerts.tf produces many alerts (per environment)

✅ Alerts run inside the right Grafana folder, using correct Prometheus source

🌱 Want to Add a New Tenant?
Let’s say you want to add a new tenant kiran. You just:

Add go-kiran-dev in locals.tf:

hcl
Copy
Edit
go-kiran-dev = {
  org_name = "gcp-kiran"
}
Add folder: product-config/kiran/grafana/alerts/alerts.tf (can copy from arth)

Add to main.tf:

hcl
Copy
Edit
module "grafana_alerting_kiran" {
  source = "../../../../product-config/kiran/grafana/alerts/"

  for_each = {
    for ds_key, ds_value in local.data_sources_prometheus :
    ds_key => ds_value.org_name
    if ds_value.org_name == "gcp-kiran"
  }

  org_id         = module.grafana-configuration.org_ids_by_name[each.value]
  datasource_uid = each.key
}
🎉 Done. You just scaled alerting to a new tenant.

Would you like the same kind of walkthrough for:

Dashboards and how they’re structured?

The Grafana SSO/AzureAD module?

Secrets / service accounts for Prometheus sync?

Let’s keep going — you’re building something great here!







You said:
yes and when the alert are vailble for all environment and how
ChatGPT said:
Great question! You're asking when exactly the alerts become available in all environments like dev, test, prod — and how this happens behind the scenes.

Let’s walk through it step-by-step like a deployment pipeline so you can clearly see when the alerts show up in Grafana.

🔁 When and How Alerts Are Available in All Environments
✅ Alerts are available in all environments after a successful Terraform apply in each environment.
🔧 Step-by-Step Workflow
1. You define alerts in one alerts.tf file per tenant (e.g., arth)
Inside product-config/arth/grafana/alerts/alerts.tf you define the rule, using dynamic values for environment.

✅ These rules don’t care if it’s dev, test, or prod — because Terraform injects those values during apply.

2. You run Terraform in each environment directory
You have different environment folders like:

Copy
Edit
terraform/
├── development/
├── testing/
├── production/
Let’s say you're working with testing, inside this path:

swift
Copy
Edit
terraform/testing/ttt-testing/grafana-configuration/
You run Terraform here:

bash
Copy
Edit
cd terraform/testing/ttt-testing/grafana-configuration
terraform init
terraform apply
3. Terraform evaluates main.tf → loops through data sources per tenant
In your main.tf:

hcl
Copy
Edit
module "grafana_alerting_arth" {
  source = "../../../../product-config/arth/grafana/alerts/"
  for_each = {
    for ds_key, ds_value in local.data_sources_prometheus :
    ds_key => ds_value.org_name
    if ds_value.org_name == "gcp-arth"
  }
  org_id         = module.grafana-configuration.org_ids_by_name[each.value]
  datasource_uid = each.key
}
This means:

If you’re in testing, and go-arth-test is in your local.data_sources_prometheus...

Terraform will deploy the alert using that data source and environment.

✔️ At this point, the alert gets created in Grafana for "testing"!

4. Repeat for other environments
You do the same steps in other environments:

bash
Copy
Edit
cd terraform/production/grafana-configuration
terraform apply
✅ Terraform finds go-arth-prod → injects that UID → creates the alert in prod Grafana

📅 So... When Are Alerts Available?

Environment	When alerts are available?	Trigger
dev	After terraform apply in development/	Deploys alert to dev Grafana
test	After terraform apply in testing/	Deploys alert to test Grafana
prod	After terraform apply in production/	Deploys alert to production Grafana
🧠 How It Works Across Environments

Alert Logic	Static or Dynamic?	Comes from
Rule name	Dynamic	datasource_uid (like go-arth-dev)
Folder UID	Static (per tenant)	"arth"
org_id	Dynamic	Based on tenant (gcp-arth, gcp-mahesh)
datasource_uid	Dynamic	Matches the environment’s Prometheus UID
Alert expression	Static	Same logic, reused across envs
🧪 Example Timeline
You do this:

bash
Copy
Edit
cd terraform/testing/ttt-testing/grafana-configuration
terraform apply
✅ Alerts created in: go-arth-test (testing Grafana)

Then:

bash
Copy
Edit
cd terraform/development/ttt-dev/grafana-configuration
terraform apply
✅ Alerts created in: go-arth-dev (dev Grafana)

Then:

bash
Copy
Edit
cd terraform/production/ttt-prod/grafana-configuration
terraform apply
✅ Alerts created in: go-arth-prod (prod Grafana)

✅ Summary
You define alert once per tenant (e.g., arth)

Terraform dynamically injects org and environment info per run

You get alerts in all environments only after running terraform apply in each one

No need to duplicate code — environment data drives the alerts

Next Steps?
Would you like a similar walk-through for:

🔍 How dashboards work in the same way?

🔐 How secrets & service accounts connect Prometheus to Grafana?

📂 Folder structure best practices?

Let’s keep this momentum going — your setup is clean, modular, and powerful!







You said:
so lets assume i have backup jobs running in only in service zone environment ,and i have to add it  to the grafana dashboard  so the alert code which i extracted can i append to the alerts .tf in the same alerts.tf 
ChatGPT said:
That’s a great use case — and yes, you can absolutely append alert rules for backup jobs into the same alerts.tf file if it's only meant for a specific environment (like servicezone).

But there’s a bit of nuance involved in how you scope it so that:

✅ It's only applied in the servicezone environment

❌ It doesn’t accidentally get applied in dev, test, prod, etc.

✅ YES: You Can Append Backup Job Alerts to alerts.tf
But here's how to do it the right way so it's only active in servicezone.

🎯 Problem: Targeting Just One Environment
Let's assume:
You have a rule for backup job alert

The rule should only be created when running Terraform in terraform/servicezone/

You want to keep it in the existing alerts.tf file (like for arth)

🧩 Solution: Use a Conditional Inside the Alert Resource
Here’s what you can do:

✅ Option 1: Wrap the backup alert in an if condition using a local/environment variable
First, define your environment somewhere like locals.tf (or pass via variable):

hcl
Copy
Edit
locals {
  environment = "servicezone"  # change per env folder
}
Then in alerts.tf:

hcl
Copy
Edit
resource "grafana_rule_group" "arth" {
  count = local.environment == "servicezone" ? 1 : 0  # Only create in servicezone

  name             = "${var.datasource_uid}-arth-backup"
  folder_uid       = "arth"
  interval_seconds = 300
  org_id           = var.org_id

  rule {
    name      = "Backup Job Failure"
    condition = "C"
    
    data {
      ref_id           = "A"
      query_type       = "time_series_query"
      datasource_uid   = var.datasource_uid
      relative_time_range {
        from = 300
        to   = 0
      }
      model = jsonencode({
        expr = "backup_job_failed{job='my-backup'}"
        refId = "A"
        format = "time_series"
        step = 60
      })
    }

    data {
      ref_id         = "C"
      query_type     = "expression"
      datasource_uid = "__expr__"
      relative_time_range {
        from = 300
        to   = 0
      }
      model = jsonencode({
        type       = "threshold"
        expression = "A > 0"
        refId      = "C"
      })
    }

    no_data_state  = "OK"
    exec_err_state = "Alerting"
  }
}
🧠 Terraform reads count = 0 as “do not create this resource”, so it will be skipped unless you are in servicezone.

✅ Option 2: Separate alerts.tf for servicezone (Recommended for clarity)
If backup alerts are only for servicezone, you could create:

swift
Copy
Edit
product-config/arth/grafana/alerts/alerts-backup.tf
Then update main.tf to conditionally include the backup module:

hcl
Copy
Edit
module "grafana_alerting_backup" {
  source   = "../../../../product-config/arth/grafana/alerts/alerts-backup"
  for_each = local.environment == "servicezone" ? {
    for ds_key, ds_value in local.data_sources_prometheus :
    ds_key => ds_value.org_name
    if ds_value.org_name == "gcp-arth"
  } : {}

  org_id         = module.grafana-configuration.org_ids_by_name[each.value]
  datasource_uid = each.key
}
This way:

alerts-backup.tf is only loaded in servicezone

Keeps your main alerts.tf clean and focused on common alerts

🧪 In Practice
You run:

bash
Copy
Edit
cd terraform/servicezone/
terraform apply
🔧 Terraform:

Detects local.environment == "servicezone"

Includes backup alert

Applies it only in servicezone Grafana

If you run in dev, it won’t show up ✅

✅ Summary

Action	Best Practice
Append alert to same alerts.tf	✅ Use count condition to filter by environment
Separate file for special alerts	✅ Preferred for maintainability and clarity
Run Terraform only in target env	✅ Ensures it doesn't affect others
Would you like help writing a full working backup alert with a specific PromQL expression too? Or maybe visualize these with folder trees?

Happy to build it with you!







You said:
based on above code please suggest
ChatGPT said:
Awesome! Let’s customize and extend the backup job alert example based on your setup — assuming:

You want to monitor backup jobs

The alert should go into the arth folder

It should only deploy in servicezone environment

You’re using the existing alerts.tf in product-config/arth/grafana/alerts/alerts.tf

✅ Recommended: Add This to alerts.tf Using count Based on Environment
Below is a ready-to-use example that plugs directly into your existing alerts.tf:

✅ Step 1: Add Environment Name to locals.tf
In your terraform/servicezone/ttt-servicezone/grafana-configuration/locals.tf, add:

hcl
Copy
Edit
locals {
  environment = "servicezone"
}
🔁 Make sure each environment folder sets this local.environment properly (dev, test, etc.)

✅ Step 2: Append This Block to alerts.tf in product-config/arth/grafana/alerts/alerts.tf
hcl
Copy
Edit
resource "grafana_rule_group" "arth_backup" {
  count = local.environment == "servicezone" ? 1 : 0

  name             = "${var.datasource_uid}-arth-backup-job"
  folder_uid       = "arth"
  interval_seconds = 300
  org_id           = var.org_id

  rule {
    name      = "Backup Job Failed"
    condition = "C"

    data {
      ref_id           = "A"
      query_type       = "time_series_query"
      datasource_uid   = var.datasource_uid
      relative_time_range {
        from = 300
        to   = 0
      }

      model = jsonencode({
        expr          = "backup_job_failed_total{job='my-backup'} > 0"
        refId         = "A"
        intervalMs    = 1000
        maxDataPoints = 43200
        format        = "time_series"
        interval      = ""
      })
    }

    data {
      ref_id           = "C"
      query_type       = "expression"
      datasource_uid   = "__expr__"
      relative_time_range {
        from = 300
        to   = 0
      }

      model = jsonencode({
        type       = "threshold"
        expression = "A > 0"
        refId      = "C"
      })
    }

    no_data_state  = "NoData"
    exec_err_state = "Alerting"
    for           = 60
  }
}
🔍 What This Does:

Key Part	Description
count = ...	Skips creating this alert if not in servicezone
name	Unique per environment and UID
folder_uid = "arth"	Stores it in the arth Grafana folder
datasource_uid	Pulled dynamically from Prometheus UID (like go-arth-servicezone)
expr in model	Checks for non-zero backup failures
condition = "C"	Uses expression evaluation result to trigger alert
no_data_state & exec_err_state	Handle edge cases like silence or errors gracefully
🧪 Then Run in servicezone Only
bash
Copy
Edit
cd terraform/servicezone/ttt-servicezone/grafana-configuration
terraform apply
✅ This will deploy the backup alert to Grafana, under org gcp-arth, in arth folder.

❌ If you try to apply this same code in dev, test, prod → this rule is skipped (because count = 0)

✅ Summary
You can append the backup alert rule directly into the same alerts.tf with a condition on the environment.


Benefit	Why it works
Reuses existing alert structure	Keeps your folder clean
Avoids duplication	One file, many uses
Scoped per env	Safer, cleaner deployment
Would you like to:

🔧 Add contact points (like Teams or OpsGenie) for this alert?

📈 Link this alert to a real dashboard panel?

📦 Use a custom folder just for backup alerts?

Happy to help expand it however you'd like!







You said:
assume that this alerts.tf has to apply into all the environment ,and there is few alerts which has to apply only in servicezone  how to implement


ChatGPT said:
Perfect — that's a very common pattern:

You want most alerts to be applied across all environments, but some environment-specific alerts (like backup alerts) should only run in certain ones (e.g., servicezone).

Let me walk you through the step-by-step Terraform setup that handles both global and environment-specific alerts in the same alerts.tf file, cleanly and reliably.

✅ Goal Recap

Alert Type	Applies To
Standard App Alerts	All environments
Backup Alerts	Only servicezone
🧩 Solution Design (Single File: alerts.tf)
We’ll use:

A local.environment value to identify which environment is active

Use count = 0 to conditionally create alerts

Group alerts by logical blocks inside alerts.tf

✅ Step-by-Step Setup
✅ 1. Set the Environment per Folder
In each environment’s folder (like terraform/servicezone/ttt-servicezone/grafana-configuration/locals.tf), define:

hcl
Copy
Edit
locals {
  environment = "servicezone"  # change this in each env: dev, test, etc.
}
✅ 2. alerts.tf: Write Shared & Scoped Alerts Together
hcl
Copy
Edit
############### Shared Alerts for ALL Environments ###############

resource "grafana_rule_group" "arth_common_alert" {
  name             = "${var.datasource_uid}-arth-common"
  folder_uid       = "arth"
  interval_seconds = 240
  org_id           = var.org_id

  rule {
    name           = "High Error Rate"
    condition      = "C"

    data {
      ref_id           = "A"
      query_type       = "time_series_query"
      datasource_uid   = var.datasource_uid
      relative_time_range {
        from = 300
        to   = 0
      }

      model = jsonencode({
        expr    = "rate(http_server_errors_total[5m]) > 0.1"
        refId   = "A"
        format  = "time_series"
      })
    }

    data {
      ref_id         = "C"
      query_type     = "expression"
      datasource_uid = "__expr__"
      relative_time_range {
        from = 300
        to   = 0
      }

      model = jsonencode({
        type       = "threshold"
        expression = "A > 0"
        refId      = "C"
      })
    }
  }
}


############### Servicezone-Only Alerts ###############

resource "grafana_rule_group" "arth_backup_alert" {
  count = local.environment == "servicezone" ? 1 : 0

  name             = "${var.datasource_uid}-arth-backup"
  folder_uid       = "arth"
  interval_seconds = 300
  org_id           = var.org_id

  rule {
    name           = "Backup Job Failure"
    condition      = "C"

    data {
      ref_id           = "A"
      query_type       = "time_series_query"
      datasource_uid   = var.datasource_uid
      relative_time_range {
        from = 300
        to   = 0
      }

      model = jsonencode({
        expr          = "backup_job_failed_total > 0"
        refId         = "A"
        intervalMs    = 1000
        maxDataPoints = 43200
        format        = "time_series"
      })
    }

    data {
      ref_id         = "C"
      query_type     = "expression"
      datasource_uid = "__expr__"
      relative_time_range {
        from = 300
        to   = 0
      }

      model = jsonencode({
        type       = "threshold"
        expression = "A > 0"
        refId      = "C"
      })
    }
  }
}
✅ 3. Terraform Apply
Now when you run:

bash
Copy
Edit
cd terraform/servicezone/ttt-servicezone/grafana-configuration
terraform apply
✅ It applies both alerts — shared + servicezone-specific.

In any other environment:

bash
Copy
Edit
cd terraform/development/...
terraform apply
✅ It only applies the shared alert — because count = 0 skips the servicezone-only block.

🧠 Bonus: Cleaner File Organization (Optional)
If your alerts.tf grows too big, you can split into:

plaintext
Copy
Edit
alerts/
├── shared-alerts.tf         # for all envs
├── servicezone-alerts.tf    # only loaded conditionally
And in main.tf, use module blocks conditionally like:

hcl
Copy
Edit
module "grafana_alerting_servicezone" {
  source   = "../../../../product-config/arth/grafana/alerts/servicezone-alerts"
  for_each = local.environment == "servicezone" ? {...} : {}
  ...
}
But this is optional — your current single-file setup is totally fine too.

✅ Summary

What to Do	How
Run alerts in all envs	Write regular resources normally
Target alerts only for specific envs	Use count = local.environment == "servicezone" ? 1 : 0
Set environment name	In locals.tf in each env folder
Maintainable structure	Keep separate blocks in alerts.tf or split by file
Would you like help extracting one of your real alerts into this structure, or adding dashboards in the same way?
